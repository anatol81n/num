"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dom = dom;
exports.doms = doms;
exports.evans = evans;
exports.makel = makel;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

function dom(parent) {
  var child = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  if (child === null) return document.querySelector(parent);
  return parent.querySelector(child);
}
function doms(parent) {
  var child = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  if (child === null) return document.querySelectorAll(parent);
  return parent.querySelectorAll(child);
}
function evans(el, obj) {
  for (var eventName in obj) {
    el.addEventListener(eventName, obj[eventName]);
  }
}
function makel() {
  var querySelector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
  var attr_regex = /\[([a-z][a-z-]+)(=['|"]?([^\]]*)['|"]?)?\]/gi;
  var attributes = querySelector.match(attr_regex);

  // remove all attribute tags before continuing matching
  querySelector = querySelector.replace(attr_regex, '');
  var nodeType = querySelector.match(/^[a-z0-9]+/i);
  var id = querySelector.match(/#([a-z]+[a-z0-9-]*)/gi);
  var classes = querySelector.match(/\.([a-z]+[a-z0-9-]*)/gi);
  var node = nodeType ? nodeType[0] : 'div';
  if (id && id.length > 1) {
    throw CreateElementException('only 1 ID is allowed');
  }
  var elt = document.createElement(node);
  if (id) {
    elt.id = id[0].replace('#', '');
  }
  if (classes) {
    var attrClasses = classes.join(' ').replace(/\./g, '');
    elt.setAttribute('class', attrClasses);
  }
  if (attributes) {
    attributes.forEach(function (item) {
      item = item.slice(0, -1).slice(1);
      var _item$split = item.split('='),
        _item$split2 = _slicedToArray(_item$split, 2),
        label = _item$split2[0],
        value = _item$split2[1];
      if (value) {
        value = value.replace(/^['"](.*)['"]$/, '$1');
      }
      elt.setAttribute(label, value || '');
    });
  }
  for (var _len = arguments.length, content = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    content[_key - 1] = arguments[_key];
  }
  content.forEach(function (item) {
    if (typeof item === 'string' || typeof item === 'number') {
      elt.appendChild(document.createTextNode(item));
    } else if (item.nodeType === document.ELEMENT_NODE) {
      elt.appendChild(item);
    }
  });
  return elt;
}
function CreateElementException(message) {
  this.message = message;
  this.name = 'CreateElementException';
}